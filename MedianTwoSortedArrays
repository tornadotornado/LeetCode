# Problems: Given two sorted arrays nums1 and nums2 of size m and n respectively.
# Find the median of the two sorted arrays. The overall run time complexity should be O(log(m+n))

# Tag：数组处理

# 分析：
  # 时间复杂度控制需在 O(log(m+n))
  # 已经整理好的数组，如果两数组个数之和是偶数，那么中位数取中间两数的平均值
  # 这是一个排序问题，涉及到数组的大小比较和数组插值操作
      # 初步思路：构建第三个数组，将第一个和第二个数组像挤牙膏一样进行比较，然后将比较后的结果存储在第三个数组中
        但这样的时间复杂度会是O(m+n)
            # 困难1：如何让该功能自动运行起来
                     需使用while循环，Array.pop和Array.append
            # 困难2：如何判断一个数组已经停止
                     循环m+n次
                     三种情况：1）两个数组长度都不为0；2）一个数组不为0；3）两个数组都为0
            # 困难3：测试写好的函数
            
      # 优化思路：将第二个数组的数与第一个数组的数进行比较，判断完大小后，直接一段一段进行处理
      
# 实战：
class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """

        nums3 = []
        stopPara = 0
        lenNums1 = len(nums1)
        lenNums2 = len(nums2)
        lenNums3 = lenNums1 + lenNums2

        while stopPara == 0:

            if lenNums1 == 0 and lenNums2 == 0:
                stopPara = 1
            else:
                if (lenNums1 > 0 and lenNums2 > 0):
                    min1 = nums1[0]
                    min2 = nums2[0]
                    if min1 < min2:
                        min3 = nums1.pop(0)
                        lenNums1 = lenNums1 - 1
                    else:
                        min3 = nums2.pop(0)
                        lenNums2 = lenNums2 - 1
                elif lenNums1 > 0:
                    min3 = nums1.pop(0)
                    lenNums1 = lenNums1 - 1
                else:
                    min3 = nums2.pop(0)
                    lenNums2 = lenNums2 - 1

                nums3.append(min3)

        if (lenNums3 % 2) == 0:
            midLeft = int(lenNums3 / 2 - 1)
            midRight = int(midLeft + 1)
            return ((nums3[midLeft] + nums3[midRight]) / 2)
        else:
            mid = int((lenNums3 + 1) / 2 - 1)
            return (nums3[mid])


m=Solution()
print(m.findMedianSortedArrays([1,2],[3,4]))
        
        
        
        
        
        
        
        
        
