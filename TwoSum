# Problem: Given an array of integers, return indices of the two numbers such that they add up to a specific value.
# You may assume each input would have exatcly one solution, and you may not use the same element twice.

# 分析
    # LeetCode的模式是只需写一个内部函数，LeetCode负责相关的测试
        # 困难0：LeetCode的运行模式是什么
            # 在python里面，需要写的是一个类(class)，类中包含函数(def)
        # 困难0.1：类在处理问题时的优势
            # 封装，继承和多态 
        # 困难0.2: python3 注释
            # 单行注释 #, 多行注释 '''_______'''
        # 困难0.3: object，self的含义
            # 类的第一参数永远是类的本身实例变量self
        # 困难0.4: 继承和类型
            # 金毛是狗的一种子类型（继承），大福是一只狗的名称（类型）  
            # LeetCode中应用的是类型
        # 困难0.5: List的一些理解
            # 索引从0开始
    # 最直接的方法是用双重循环，该方法的时间复杂度是O(n^2)
        # 困难1：python如何实现与数组相关的双重循环
            # python中有两种循环: 1）基于单元的循环 for fruit in fruits; 2）基于索引的循环 for index in range(len(fruits))
                                    该题目需要使用基于索引的循环，但是python貌似不能实现
            # python中range的应用  range（5）-> range(0,5)
    # 进一步的优化策略是使用特殊的数据结构
        # 困难2：使用什么样的数据结构
            # 双重循环的方法速度太慢，只能击败11.28%的submission，用时5600ms，优化的算法应该可以把算法控制在70ms以内，针对该问题提升速度100倍

# 实战
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """        
        numsLen = len(nums)   # length of the list 'nums'    
        
        for index1 in range(numsLen):
            for index2 in range(index1+1, numsLen):
                valueCur = nums[index1] + nums[index2]
                if(valueCur == target):
                    return [index1, index2]
                
        
        
        
        
        
        
        
       
           
